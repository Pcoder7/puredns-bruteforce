name: Parallel PureDNS Bruteforce

on:
  workflow_dispatch:

permissions:
  contents: write

env:
  LINES_PER_CHUNK: 500000
  COMBINED_WORDLIST: "best-wordlist-9996122_filter.txt"
 

jobs:
  prepare_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Cache Go modules and binaries
        uses: actions/cache@v3
        with:
          path: |
            $HOME/go/pkg/mod
            ~/.cache/go-build
            $HOME/go/bin
            best-wordlist-9996122.txt
            seclistes-dns-7110368.txt
          key: wordlists-cache-v1
          key: ${{ runner.os }}-go-cache-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-cache-

      - name: Install prerequisites
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y git make gcc dos2unix
          # go is provided by setup-go

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Install massdns & PureDNS
        run: |
          if ! command -v massdns >/dev/null; then
            git clone https://github.com/blechschmidt/massdns.git
            cd massdns && make && sudo make install && cd ..
          else
            echo "massdns already installed"
          fi        
          if ! command -v puredns >/dev/null; then
            go install github.com/d3mondev/puredns/v2@latest
          else
            echo "puredns already installed"
          fi    
          if ! command -v anew >/dev/null; then
            go install github.com/tomnomnom/anew@latest
          else
            echo "anew already installed"
          fi          

          echo "$HOME/go/bin" >> $GITHUB_PATH
      
      - name: Cache Wordlists
        uses: actions/cache@v3
        with:
          path: |
            best-wordlist-9996122.txt
            seclistes-dns-7110368.txt
            resolvers.txt
          key: wordlists-cache-v1
          
      - name: Fetch wordlists
        run: |
          # Download only if not cached already
          if [ ! -f best-wordlist-9996122.txt ]; then
            wget -qO best-wordlist-9996122.txt \
              https://github.com/Pcoder7/All-In-One-DNS-Wordlist/raw/refs/heads/main/best-wordlist-9996122.txt
          fi
          if [ ! -f seclistes-dns-7110368.txt ]; then
            wget -qO seclistes-dns-7110368.txt \
              https://github.com/Pcoder7/All-In-One-DNS-Wordlist/raw/refs/heads/main/seclistes-dns-7110368.txt
          fi
          if [ ! -f resolvers.txt ]; then
              wget -qO resolvers.txt \
              https://raw.githubusercontent.com/rix4uni/resolvers/refs/heads/main/resolvers.txt
              echo "resolvers.txt is downloaded"
          fi

      - name: Build filter_wordlist tool
        run: |
          
          go build -o filter_wordlist filter_wordlist.go
          chmod +x filter_wordlist
          dos2unix filter_wordlist

      - name: Filter and combine wordlists
        run: |
          ./filter_wordlist best-wordlist-9996122.txt \
            > best-wordlist-9996122_filter.txt
          ./filter_wordlist seclistes-dns-7110368.txt \
            > seclistes-dns-7110368_filter.txt
          cat seclistes-dns-7110368_filter.txt \
            | anew -q best-wordlist-9996122_filter.txt \
            > added-lines.txt
          wc -l added-lines.txt 

      - name: Split combined wordlist into chunks
        run: |
          mkdir -p chunks
          split -l $LINES_PER_CHUNK "$COMBINED_WORDLIST" chunks/chunk_
          echo "Generated $(ls chunks | wc -l) chunks"

      - name: Build matrix JSON
        id: set_matrix
        run: |
          doms=$(grep -E '\S' domains.txt | jq -R -s -c 'split("\n")[:-1]')
          chs=$(ls chunks | jq -R -s -c 'split("\n")[:-1]')
          matrix=$(jq -n --argjson D "$doms" --argjson C "$chs" \
            '[ $D[] as $d | $C[] as $c | {domain:$d,chunk:"chunks/\($c)"} ]')
          # Use multi-line output for GitHub Actions
          echo "matrix<<EOF" >> $GITHUB_OUTPUT
          echo "$matrix" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  bruteforce:
    needs: prepare_matrix
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 20   
      fail-fast: false
      matrix:
        pair: ${{ fromJson(needs.prepare_matrix.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Restore Go cache
        uses: actions/cache@v3
        with:
          path: |
            $HOME/go/pkg/mod
            ~/.cache/go-build
            $HOME/go/bin
          key: ${{ runner.os }}-go-cache-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-cache-

      - name: Create results directory
        run: |
          D="${{ matrix.pair.domain }}"
          mkdir -p "results/$D"
                  
      - name: Run PureDNS Bruteforce on chunk
        run: |
         
          D="${{ matrix.pair.domain }}"
          CHUNK="${{ matrix.pair.chunk }}"
          OUT="results/$D/$(basename "$CHUNK").txt"

          echo "â‡¢ Bruteforce $D with $CHUNK"
          cat $CHUNK | puredns bruteforce $D \
            -r resolvers.txt \
            --write "$OUT" --write-wildcards wildcards.txt --write-massdns massdns.txt

      - name: Commit & push results
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add results/
          git diff --cached --quiet || {
            git commit -m "Add puredns chunk for ${{ matrix.pair.domain }}:${{ matrix.pair.chunk }}"
            git pull --rebase --autostash origin main
            git push
          }
