name: Parallel PureDNS Bruteforce

on:
  workflow_dispatch:

permissions:
  contents: write

env:
  LINES_PER_CHUNK: 500000
  COMBINED_WORDLIST: "best-wordlist-9996122_filter.txt"
 

jobs:
  prepare_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Cache Go modules and binaries
        uses: actions/cache@v3
        with:
          path: |
            $HOME/go/pkg/mod
            ~/.cache/go-build
            $HOME/go/bin
          key: ${{ runner.os }}-go-cache-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-cache-

      - name: Install prerequisites
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y git make gcc dos2unix
          # go is provided by setup-go

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Install massdns & PureDNS
        run: |
          if ! command -v massdns >/dev/null; then
            git clone https://github.com/blechschmidt/massdns.git
            cd massdns && make && sudo make install && cd ..
          else
            echo "massdns already installed"
          fi        
          if ! command -v puredns >/dev/null; then
            go install github.com/d3mondev/puredns/v2@latest
          else
            echo "puredns already installed"
          fi    
          if ! command -v anew >/dev/null; then
            go install github.com/tomnomnom/anew@latest
          else
            echo "anew already installed"
          fi          

          echo "$HOME/go/bin" >> $GITHUB_PATH
      
      - name: Cache Wordlists
        uses: actions/cache@v3
        with:
          path: |
            best-wordlist-9996122.txt
            seclistes-dns-7110368.txt
            resolvers.txt
          key: wordlists-cache-v2-${{ hashFiles('best-wordlist-9996122.txt', 'seclistes-dns-7110368.txt', 'resolvers.txt') }} # More specific cache key
          restore-keys: |
            wordlists-cache-v2-
          
      - name: Fetch wordlists
        run: |
          # Download only if not cached already
          if [ ! -f best-wordlist-9996122.txt ]; then
            wget -qO best-wordlist-9996122.txt \
              https://github.com/Pcoder7/All-In-One-DNS-Wordlist/raw/refs/heads/main/best-wordlist-9996122.txt
          fi
          if [ ! -f seclistes-dns-7110368.txt ]; then
            wget -qO seclistes-dns-7110368.txt \
              https://github.com/Pcoder7/All-In-One-DNS-Wordlist/raw/refs/heads/main/seclistes-dns-7110368.txt
          fi
          if [ ! -f resolvers.txt ]; then
              wget -qO resolvers.txt \
              https://raw.githubusercontent.com/rix4uni/resolvers/refs/heads/main/resolvers.txt
              echo "resolvers.txt is downloaded"
          fi

      - name: Build filter_wordlist tool
        run: |
          
          go build -o filter_wordlist filter_wordlist.go
          chmod +x filter_wordlist
          

      - name: Filter and combine wordlists
        run: |
          if [ -f ./filter_wordlist ]; then
            echo "Filtering wordlists..."
            ./filter_wordlist best-wordlist-9996122.txt > best-wordlist-9996122_filter.txt
            ./filter_wordlist seclistes-dns-7110368.txt > seclistes-dns-7110368_filter.txt
            
            cat seclistes-dns-7110368_filter.txt | anew -q best-wordlist-9996122_filter.txt > added-lines.txt
            echo "Lines added to combined list from seclistes:"
            wc -l added-lines.txt
          else
            echo "filter_wordlist tool not found, using raw wordlists for combining (if applicable)."
            
            # Fallback or error if filter_wordlist is essential
            # For now, assume COMBINED_WORDLIST relies on the _filter.txt version.
            # If filter_wordlist.go is not present, this job might behave unexpectedly
            # if COMBINED_WORDLIST is expected to be the output of filtering.
            # Ensure best-wordlist-9996122_filter.txt exists or is created appropriately.
            # For this example, let's assume if filter_wordlist isn't built, we use the original
            # as the COMBINED_WORDLIST if the _filter.txt version isn't created.
            
            if [ ! -f "$COMBINED_WORDLIST" ] && [ -f "best-wordlist-9996122.txt" ]; then
                echo "Warning: $COMBINED_WORDLIST not found. Using raw best-wordlist-9996122.txt for splitting."
                cp best-wordlist-9996122.txt "$COMBINED_WORDLIST"
            elif [ ! -f "$COMBINED_WORDLIST" ]; then
                echo "Error: $COMBINED_WORDLIST cannot be found or created."
                exit 1
            fi
          fi

      - name: Split combined wordlist into chunks
        run: |
          if [ ! -f "$COMBINED_WORDLIST" ]; then
            echo "Error: Combined wordlist '$COMBINED_WORDLIST' not found. Cannot split."
            exit 1
          fi
          mkdir -p chunks
          echo "Splitting '$COMBINED_WORDLIST' into chunks of $LINES_PER_CHUNK lines..."
          split -l $LINES_PER_CHUNK -a 2 --numeric-suffixes=1 "$COMBINED_WORDLIST" chunks/chunk_
          CHUNKS_COUNT=$(ls chunks | wc -l)
          echo "Generated $CHUNKS_COUNT chunks."
          if [ "$CHUNKS_COUNT" -eq 0 ]; then
            echo "Error: No chunks were generated. Wordlist might be empty or too small."
            exit 1
          fi
          echo "Ensuring placeholder files for artifact exist..."
          touch wildcards.txt massdns.txt # Create empty files if they don't exist

      - name: Build matrix JSON
        id: set_matrix
        run: |
          if [ ! -f domains.txt ]; then
            echo "Error: domains.txt not found!"
            exit 1
          fi
          # Ensure domains.txt is not empty and jq is installed
          sudo apt-get install -y jq
   
          doms=$(grep -E '\S' domains.txt | jq -R -s -c 'split("\n")[:-1]')
          chs=$(ls chunks | jq -R -s -c 'split("\n")[:-1]')
          matrix=$(jq -n --argjson D "$doms" --argjson C "$chs" \
            '[ $D[] as $d | $C[] as $c | {domain:$d,chunk:"chunks/\($c)"} ]')
          # Use multi-line output for GitHub Actions
          echo "matrix<<EOF" >> $GITHUB_OUTPUT
          echo "$matrix" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Upload chunks as artifact
        uses: actions/download-artifact@v4 
        with:
          name: chunks
          path: |      
            chunks
            resolvers.txt 
            wildcards.txt # Initial empty wildcards file, puredns will append to it.
            massdns.txt   # Initial empty massdns file, puredns will append to it.
           

  bruteforce:
    needs: prepare_matrix
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 20   
      fail-fast: false
      matrix:
        pair: ${{ fromJson(needs.prepare_matrix.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Restore Go cache
        uses: actions/cache@v3
        with:
          path: |
            $HOME/go/pkg/mod
            ~/.cache/go-build
            $HOME/go/bin
          key: ${{ runner.os }}-go-cache-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-cache-
            
      - name: Add Go bin to PATH
        run: echo "${{ env.HOME }}/go/bin" >> $GITHUB_PATH
        
      - name: Install prerequisites for massdns
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y git make gcc

      - name: Install massdns
        run: |
          if ! command -v massdns >/dev/null; then
            echo "massdns not found, installing..."
            git clone https://github.com/blechschmidt/massdns.git
            cd massdns
            make -j$(nproc)
            sudo make install
            cd ..
            rm -rf massdns
          else
            echo "massdns already installed or cached."
          fi
          # Verify puredns is available (from cache or needs install if cache failed)
          if ! command -v puredns >/dev/null; then
            echo "puredns not found in PATH after cache restore. Installing..."
            go install github.com/d3mondev/puredns/v2@latest
          else
            echo "puredns is available."
          fi
          if ! command -v anew >/dev/null; then
            echo "anew not found in PATH after cache restore. Installing..."   
            go install github.com/tomnomnom/anew@latest
          else
            echo "anew already installed"
          fi          

      - name: Download puredns assets (chunks and resolvers)
        uses: actions/download-artifact@v4 
        with:
          name: chunks
          
      - name: Create results directory
        run: |
          D="${{ matrix.pair.domain }}"
          mkdir -p "results/$D"
                  
      - name: Run PureDNS Bruteforce on chunk
        run: |
         
          DOMAIN="${{ matrix.pair.domain }}"
          CHUNK_FILE="${{ matrix.pair.chunk_file }}" # Using the updated matrix key
          CHUNK_PATH="chunks/$CHUNK_FILE" # Reconstruct full path to chunk

          # Verify files downloaded correctly
          if [ ! -d "chunks" ]; then
            echo "Error: 'chunks' directory not found after artifact download!"
            ls -A . # List current directory contents
            exit 1
          fi
          if [ ! -f "$CHUNK_PATH" ]; then
            echo "Error: Chunk file '$CHUNK_PATH' not found after artifact download!"
            ls -A chunks/ # List chunks directory contents
            exit 1
          fi
          if [ ! -f "resolvers.txt" ]; then
            echo "Error: resolvers.txt not found after artifact download!"
            ls -A .
            exit 1
          fi
          
          # Sanitize domain for use in output file names if needed
          D_FILENAME=$(echo "$DOMAIN" | tr '.' '_')
          OUT_DIR="results/$D_FILENAME"
          OUT_FILE="$OUT_DIR/results_$(basename "$CHUNK_FILE").txt"
          # These output files are specific to puredns's operation here
          WILDCARDS_OUT_FILE="$OUT_DIR/wildcards_$(basename "$CHUNK_FILE").txt"
          MASSDNS_OUT_FILE="$OUT_DIR/massdns_$(basename "$CHUNK_FILE").f "best-wordlist-9996122.txt" ]; then
                echo "Warning: $COMBINED_WORDLIST (filtered) not found. Using raw best-wordlist-9996122.txt as $COMBINED_WORDLIST for splitting."
                cp best-wordlist-9996122.txt "$COMBINED_WORDLIST" # This creates the _filter.txt file from the raw one
            elif [ ! -f "$COMBINED_WORDLIST" ]; then
                echo "Error: $COMBINED_WORDLIST cannot be found or created. Ensure best-wordlist-9996122.txt exists if filter_wordlist is not used."
                exit 1
            fi
          fi   # Make massdns file unique per chunk/domain

          echo "⇢ Bruteforcing $DOMAIN with $CHUNK_PATH"
          echo "Outputting results to $OUT_FILE"
          
          # The puredns command itself. User requested not to change this.
          # Ensure the output files are correctly handled.
          # puredns will create these files.
          cat "$CHUNK_PATH" | puredns bruteforce "$DOMAIN" \
            -r resolvers.txt \
            --write "$OUT_FILE" \
            --write-wildcards "$WILDCARDS_FILE" \
            --write-massdns "$MASSDNS_FILE"
          
          echo "Puredns scan complete for $DOMAIN with $CHUNK_PATH."
          echo "Results are in $OUT_FILE"
          if [ -f "$WILDCARDS_FILE" ]; then echo "Wildcards in $WILDCARDS_FILE"; fi
          if [ -f "$MASSDNS_FILE" ]; then echo "MassDNS formatted output in $MASSDNS_FILE"; fi



      - name: Commit & push results
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add results/
          git diff --cached --quiet || {
            git commit -m "Add puredns chunk for ${{ matrix.pair.domain }}:${{ matrix.pair.chunk }}"
            git pull --rebase --autostash origin main
            git push
          }
